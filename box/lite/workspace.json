{
  "configuration" : { },
  "description" : "Description",
  "documentation" : {
    "sections" : [ {
      "content" : "## API Hugging chat\r\n\r\n### Типы ручек\r\n\r\n\r\n\r\n#### Чат\r\n\r\n##### Создание и управление диалогами\r\n- POST `/conversation` - создать диалог\r\n- GET `/api/conversations?p=` - список диалогов (пагинация)\r\n- GET `/api/conversation/{id}` - получить диалог\r\n- PATCH `/conversation/{id}` - обновить диалог (title, model)\r\n- DELETE `/conversation/{id}` - удалить диалог\r\n- DELETE `/api/conversations` - удалить все диалоги\r\n\r\n##### Генерация и стриминг ответа\r\n- POST `/conversation/{id}` - отправить сообщение и получить JSONL-стрим ответа\r\n- POST `/conversation/{id}/stop-generating` - прервать генерацию\r\n\r\n##### Операции с сообщениями\r\n- DELETE `/api/conversation/{id}/message/{messageId}` - удалить сообщение и поддерево\r\n- GET `/conversation/{id}/message/{messageId}/prompt` - получить собранный промпт\r\n- POST `/conversation/{id}/message/{messageId}/vote` - голосовать за ответ (-1/0/1)\r\n\r\n##### Шаринг диалога\r\n- POST `/conversation/{id}/share` - создать публичный слепок диалога\r\n\r\n##### Файлы сообщений\r\n- GET `/conversation/{id|shareId}/output/{sha256}` - скачать вложение\r\n\r\n---\r\n\r\n#### Ассистенты (Assistants)\r\n\r\n##### CRUD операции\r\n- POST `/api/assistant` - создать ассистента (form-data: name, description, modelId, preprompt, tools, avatar, RAG-настройки, generateSettings)\r\n- GET `/api/assistant/{id}` - получить ассистента\r\n- PATCH `/api/assistant/{id}` - обновить ассистента (form-data: те же поля)\r\n- DELETE `/api/assistant/{id}` - удалить ассистента\r\n\r\n##### Каталог и поиск\r\n- GET `/api/assistants?q=&modelId=&p=&user=&showUnfeatured=` - список ассистентов с фильтрацией и пагинацией\r\n- GET `/api/user/assistants` - ассистенты пользователя (подписки + из диалогов)\r\n\r\n##### Подписки\r\n- POST `/api/assistant/{id}/subscribe` - подписаться на ассистента (добавить в настройки, сделать активным)\r\n- DELETE `/api/assistant/{id}/subscribe` - отписаться от ассистента (убрать из настроек, переключить на default)\r\n\r\n##### Модерация и репорты\r\n- POST `/api/assistant/{id}/report` - пожаловаться на ассистента (reason)\r\n- PATCH `/api/assistant/{id}/review` - модерация ассистента (status: PENDING/APPROVED/DENIED, админ)\r\n\r\n---\r\n\r\n#### Инструменты (Tools)\r\n\r\n##### CRUD операции\r\n- POST `/api/tools` - создать community-инструмент (JSON: displayName, description, parameters, examples)\r\n- GET `/api/tools/{toolId}` - получить инструмент (конфиговый или community APPROVED)\r\n- PATCH `/api/tools/{toolId}` - обновить инструмент (только автор)\r\n- DELETE `/api/tools/{toolId}` - удалить инструмент (автор/админ, очищает из настроек/ассистентов)\r\n\r\n##### Поиск\r\n- GET `/api/tools/search?q=` - поиск инструментов (конфиговые + community APPROVED, топ-5)\r\n\r\n##### Модерация и репорты\r\n- POST `/api/tools/{toolId}/report` - пожаловаться на инструмент (reason)\r\n- PATCH `/api/tools/{toolId}/review` - модерация инструмента (status, админ)\r\n\r\n---\r\n\r\n#### Модели (Models)\r\n\r\n##### Каталог\r\n- GET `/api/models` - список доступных моделей (с описанием, флагами multimodal/tools/unlisted)\r\n\r\n---\r\n\r\n#### Пользователи (User)\r\n\r\n##### Профиль\r\n- GET `/api/user` - получить данные пользователя (id, username, name, email, avatarUrl, hfUserId)\r\n\r\n##### Настройки и подписки\r\n- GET `/api/user/assistants` - ассистенты пользователя (подписки + из диалогов)\r\n\r\n##### Админ-функции\r\n- POST `/api/user/validate-token` - валидация админ-токена (token → valid: boolean)\r\n\r\n---\r\n\r\n#### Аутентификация (Auth)\r\n\r\n##### OIDC авторизация\r\n- GET `/login` - авторизация через OIDC (редирект на провайдера)\r\n- GET `/login/callback?code=&state=&iss=` - обработка callback авторизации (создание/обновление сессии, allow-лист)\r\n\r\n##### Выход\r\n- POST `/logout` - выход из системы (удаление сессии и cookie)\r\n\r\n---\r\n\r\n##### Администрирование (Admin)\r\n\r\n##### Экспорт данных\r\n- POST `/admin/export` - экспорт диалогов в Parquet и загрузка на HF Hub (требует админ-токен, model)\r\n\r\n##### Статистика\r\n- POST `/admin/stats/compute` - пересчёт статистики (асинхронный job, требует админ-токен)\r\n\r\n---\r\n\r\n#### Системные (System)\r\n\r\n##### Здоровье\r\n- GET `/healthcheck` - проверка здоровья системы (OK)\r\n\r\n##### Альтернативная API\r\n- GET/POST/PUT/PATCH/DELETE `/api/v2/[...slugs]` - прокси для Elysia API (расширения/совместимость)\r\n\r\n---\r\n\r\n#### Публичные страницы (Pages)\r\n\r\n##### Главная и каталоги\r\n- GET `/` - главная страница\r\n- GET `/assistants` - каталог ассистентов\r\n- GET `/models` - каталог моделей\r\n- GET `/tools` - каталог инструментов\r\n\r\n##### Детальные страницы\r\n- GET `/assistant/{id}` - страница ассистента\r\n- GET `/models/{model}` - страница модели\r\n- GET `/tools/{id}` - страница инструмента\r\n\r\n##### Настройки и политики\r\n- GET `/settings` - настройки пользователя\r\n- GET `/privacy` - политика конфиденциальности\r\n\r\n##### Публичный контент\r\n- GET `/r/{id}` - публичный просмотр расшаренного диалога\r\n\r\n---\r\n\r\n#### Файлы и медиа\r\n\r\n##### Аватары и превью\r\n- GET `/assistant/{id}/avatar.jpg` - аватар ассистента\r\n- GET `/assistant/{id}/thumbnail.png` - превью ассистента\r\n- GET `/models/{model}/thumbnail.png` - превью модели\r\n\r\n---\r\n\r\n#### Настройки и конфигурация\r\n\r\n##### #Пользовательские настройки\r\n- POST `/settings/(nav)/+server.ts` - обновление настроек пользователя (shareConversationsWithModelAuthors, hideEmojiOnSidebar, activeModel, customPrompts, tools, disableStream, directPaste)\r\n\r\n---\r\n\r\n#### Особенности\r\n\r\n- **Два типа API**: SvelteKit routes (`/api/*`) и Elysia API (`/api/v2/*`)\r\n- **Модерация**: система review для ассистентов и инструментов (PRIVATE/PENDING/APPROVED/DENIED)\r\n- **Community features**: пользователи могут создавать ассистентов и инструменты (с лимитами)\r\n- **Экспорт данных**: админ может экспортировать диалоги в Hugging Face Hub (Parquet)\r\n- **Статистика**: автоматический подсчёт метрик использования (latency, tokens, votes)\r\n- **RAG**: поддержка веб-поиска и документов (автоматический парсинг PDF)\r\n- **Файлы**: загрузка и скачивание вложений к сообщениям (GridFS, лимит 10MB)\r\n- **Аутентификация**: сессионная (cookie) + опциональный OpenID Connect\r\n- **Лимиты**: на количество диалогов/сообщений/длину сообщений/rate limit\r\n- **Дерево сообщений**: поддержка ветвления (retry/continue), удаление поддеревьев\r\n\r\n  ### Чат\r\n\r\n  #### Создание и управление диалогами\r\n\r\n  ##### 1. POST `/conversation` - создать диалог\r\n\r\n  **Входные данные (JSON):**\r\n  ```jsonc\r\n  {\r\n    \"model\": \"string\",        // обязательное: ID модели (или name/id из конфигурации)\r\n    \"assistantId\": \"string\",  // опционально: ID ассистента (ObjectId)\r\n    \"preprompt\": \"string\",    // опционально: системный промпт; если есть assistantId - перезапишется из ассистента\r\n    \"fromShare\": \"string\"     // опционально: ID расшаренного диалога (7-символьный shareId) для копии\r\n  }\r\n  ```\r\n\r\n  **Выходные данные (JSON):**\r\n  ```jsonc\r\n  {\r\n    \"conversationId\": \"string\"  // ObjectId созданного диалога\r\n  }\r\n  ```\r\n\r\n  **Логика:**\r\n  - Проверяет лимиты (`usageLimits.conversations`).\r\n  - Если `fromShare` - копирует сообщения/заголовок/модель/preprompt/assistantId из шареда.\r\n  - Если `assistantId` - берёт `preprompt` ассистента, иначе - дефолт из модели.\r\n  - Создаёт root системное сообщение с `preprompt` (root в контексте чата - это первое сообщение в дереве диалога, от которого строится вся остальная структура.).\r\n  - Выбирает `embeddingModel` из модели или дефолтный. (embedding - векторное представление текста\r\n  Embedding модель преобразует текст в числовые векторы для поиска похожих фрагментов.)\r\n\r\n  **Ошибки:**\r\n  - 400 - невалидная/скрытая модель (unlisted).\r\n  - 404 - `fromShare` не найден.\r\n  - 429 - превышен лимит диалогов.\r\n\r\n  ---\r\n\r\n  ##### 2. GET `/api/conversations?p=` - список диалогов\r\n\r\n  **Входные параметры:**\r\n  - `p` - номер страницы (по умолчанию 0)\r\n\r\n  **Выходные данные (JSON):**\r\n  ```jsonc\r\n  [\r\n    {\r\n      \"_id\": \"string\",         // ObjectId диалога\r\n      \"id\": \"string\",          // дубликат _id (legacy для iOS)\r\n      \"title\": \"string\",       // заголовок\r\n      \"updatedAt\": \"Date\",     // ISO-строка времени\r\n      \"model\": \"string\",       // ID модели\r\n      \"modelId\": \"string\",     // дубликат model (legacy)\r\n      \"assistantId\": \"string\", // ObjectId ассистента (если есть)\r\n      \"modelTools\": true       // модель поддерживает инструменты\r\n    }\r\n  ]\r\n  ```\r\n\r\n  **Логика:**\r\n  - Пагинация `CONV_NUM_PER_PAGE`, сортировка по `updatedAt` desc.\r\n  - Возвращает только поля, нужные списку.\r\n\r\n  **Ошибки:**\r\n  - 401 - нет сессии/пользователя.\r\n\r\n  ---\r\n\r\n  ##### 3. GET `/api/conversation/{id}` - получить диалог\r\n\r\n  **Параметры:**\r\n  - `id` - ObjectId диалога\r\n\r\n  **Выходные данные (JSON):**\r\n  ```jsonc\r\n  {\r\n    \"id\": \"string\",            // ObjectId диалога\r\n    \"title\": \"string\",         // заголовок\r\n    \"updatedAt\": \"Date\",       // ISO-строка\r\n    \"modelId\": \"string\",       // ID модели\r\n    \"assistantId\": \"string\",   // ObjectId ассистента (если есть)\r\n    \"messages\": [\r\n      {\r\n        \"content\": \"string\",   // текст сообщения\r\n        \"from\": \"user\",        // \"user\" | \"assistant\" | \"system\"\r\n        \"id\": \"string\",        // UUID сообщения\r\n        \"createdAt\": \"Date\",   // ISO-строка\r\n        \"updatedAt\": \"Date\",   // ISO-строка\r\n        \"webSearch\": {},       // объект с данными веб-поиска (если был)\r\n        \"files\": [             // вложения (хэши/метаданные)\r\n          {\r\n            \"type\": \"hash\",    // \"hash\" | \"base64\" (в сохранённом сообщении остаётся hash)\r\n            \"name\": \"string\",\r\n            \"value\": \"string\", // sha256\r\n            \"mime\": \"string\"\r\n          }\r\n        ],\r\n        \"updates\": [           // события (без стрим-токенов)\r\n          /* MessageUpdate без KeepAlive/Stream */\r\n        ],\r\n        \"reasoning\": \"string\"  // CoT/мысленный поток (если конфиг включал)\r\n      }\r\n    ],\r\n    \"modelTools\": true         // модель поддерживает инструменты\r\n  }\r\n  ```\r\n\r\n  **Логика:**\r\n  - Проверяет доступ через `authCondition(locals)`.\r\n  - Возвращает структуру диалога с сообщениями и признак инструментов.\r\n\r\n  **Ошибки:**\r\n  - 401 - нет сессии.\r\n  - 404 - не найден/нет доступа.\r\n\r\n  ---\r\n\r\n  ##### 4. PATCH `/conversation/{id}` - обновить метеданные диалога (название, модель)\r\n\r\n  **Входные данные (JSON):**\r\n  ```jsonc\r\n  {\r\n    \"title\": \"string\",  // опционально: 1..100 символов\r\n    \"model\": \"string\"   // опционально: валидный ID модели\r\n  }\r\n  ```\r\n\r\n  **Выходные данные:**\r\n  ```jsonc\r\n  {} // 200 OK, пустое тело\r\n  ```\r\n\r\n  **Логика:**\r\n  - Валидирует `title` и `model`.\r\n  - Обновляет только переданные поля.\r\n  - Проверяет доступ.\r\n\r\n  **Ошибки:**\r\n  - 400 - невалидные данные.\r\n  - 404 - не найден/нет доступа.\r\n\r\n  ---\r\n\r\n  ##### 5. DELETE `/conversation/{id}` - удалить диалог\r\n\r\n  **Параметры:**\r\n  - `id` - ObjectId диалога\r\n\r\n  **Выходные данные:**\r\n  ```jsonc\r\n  {} // 200 OK, пустое тело\r\n  ```\r\n\r\n  **Логика:**\r\n  - Проверяет доступ и удаляет документ из `conversations`.\r\n\r\n  **Ошибки:**\r\n  - 404 - не найден/нет доступа.\r\n\r\n  ---\r\n\r\n  ##### 6. DELETE `/api/conversations` - удалить все диалоги\r\n\r\n  **Вход:**\r\n  ```jsonc\r\n  {} // без тела\r\n  ```\r\n\r\n  **Выход:**\r\n  ```jsonc\r\n  {} // 200 OK, пустое тело\r\n  ```\r\n\r\n  **Логика:**\r\n  - `deleteMany()` по `authCondition(locals)` (все диалоги текущего пользователя/сессии).\r\n\r\n  **Ошибки:**\r\n  - 401 - нет сессии/пользователя.\r\n\r\n  ---\r\n\r\n  ##### Общие особенности\r\n  - Аутентификация:\r\n  ```jsonc\r\n  {\r\n    \"requires\": \"userId или sessionId\", // доступ через authCondition(locals)\r\n    \"unauthorized\": 401\r\n  }\r\n  ```\r\n  - Валидация и лимиты:\r\n  ```jsonc\r\n  {\r\n    \"validation\": \"Zod-схемы\",\r\n    \"limits\": \"usageLimits.*\" // conversations/messages/messageLength/...\r\n  }\r\n  ```\r\n  - Метрики:\r\n  ```jsonc\r\n  {\r\n    \"metrics\": \"MetricsServer\", // инкременты на создание диалогов/сообщений и время/токены\r\n    \"fields\": [\"conversationsTotal\", \"messagesTotal\", \"latency\", \"timeToFirstToken\", \"timePerOutputToken\"]\r\n  }\r\n  ```\r\n  - Модель данных:\r\n  ```jsonc\r\n  {\r\n    \"conversations\": {\r\n      \"_id\": \"ObjectId\",\r\n      \"title\": \"string\",\r\n      \"rootMessageId\": \"uuid\",\r\n      \"messages\": \"Message[]\",\r\n      \"model\": \"string\",\r\n      \"preprompt\": \"string\",\r\n      \"assistantId\": \"ObjectId|null\",\r\n      \"embeddingModel\": \"string\",\r\n      \"createdAt\": \"Date\",\r\n      \"updatedAt\": \"Date\",\r\n      \"userId\": \"ObjectId|null\",\r\n      \"sessionId\": \"string|null\"\r\n    }\r\n  }\r\n  ```\r\n\r\n  ---\r\n\r\n  #### Генерация и стриминг ответа\r\n\r\n  ##### 1. POST `/conversation/{id}` - отправить сообщение и получить стрим ответа\r\n\r\n  **Запрос:**\r\n  - Тип: `multipart/form-data`\r\n  - Поля:\r\n    - `data` - строка JSON (обязательно)\r\n    - `files` - бинарные части с файлами (опционально)\r\n\r\n  **Схема `data` (JSON):**\r\n  ```jsonc\r\n  {\r\n    \"id\": \"string\",         // опционально: UUID узла дерева.\r\n                            // - обычное сообщение: parentId (или не указывать - создастся новая пара user+assistant)\r\n                            // - is_retry=true: ID сообщения, которое ретраим\r\n                            // - is_continue=true: ID последнего assistant-сообщения\r\n    \"inputs\": \"string\",     // опционально: текст пользователя; обязателен для обычного сообщения и retry user-сообщения\r\n    \"is_retry\": false,      // опционально: перегенерация ответа\r\n    \"is_continue\": false,   // опционально: продолжить вывод для последнего assistant-сообщения\r\n    \"web_search\": false,    // опционально: включить веб-поиск (RAG)\r\n    \"tools\": [\"string\"],    // опционально: предпочтительные tool IDs\r\n    \"files\": [              // опционально: уже существующие файлы по hash\r\n      { \"type\": \"hash\", \"name\": \"string\", \"value\": \"sha256\", \"mime\": \"string\" }\r\n    ]\r\n  }\r\n  ```\r\n\r\n  **Файлы:**\r\n  - В `multipart` можно прикладывать реальные файлы; каждый загружается и сохраняется как `type: \"hash\"`.\r\n  - Лимит: < 10MB/файл (иначе 413).\r\n  - Если есть PDF - автоматически подключается инструмент парсинга документов.\r\n\r\n  **Поведение (дерево):**\r\n  - Обычное сообщение: добавляет `user` и пустой `assistant`; стрим наполняет `assistant`.\r\n  - Retry:\r\n    - user+inputs → создаёт соседний `user` и дочерний `assistant`;\r\n    - assistant → создаёт соседний `assistant`, промпт без ретраимого ответа.\r\n  - Continue: разрешено только для последнего `assistant` в ветке, дописывает в тот же узел.\r\n\r\n  **Лимиты/защита:**\r\n  ```jsonc\r\n  {\r\n    \"rateLimit\": \"messagesPerMinute по user и IP\",\r\n    \"messages\": \"максимум сообщений в диалоге\",\r\n    \"messageLength\": \"ограничение длины inputs\",\r\n    \"MESSAGES_BEFORE_LOGIN\": \"сколько ответов доступно гостю до логина\"\r\n  }\r\n  ```\r\n\r\n  **Ответ:**\r\n  - Тип: JSONL-стрим (каждая строка - отдельное событие JSON)\r\n  - Заголовки:\r\n  ```http\r\n  Content-Type: application/jsonl\r\n  ```\r\n\r\n  **Типы событий (примеры):**\r\n  ```jsonc\r\n  { \"type\": \"stream\", \"token\": \"...\" }                           // поток токенов\r\n  { \"type\": \"status\", \"status\": \"started|keepalive|error\" }      // статусы\r\n  { \"type\": \"title\", \"title\": \"string\" }                         // заголовок\r\n  { \"type\": \"finalAnswer\", \"text\": \"string\", \"interrupted\": false } // финальный ответ\r\n  { \"type\": \"file\", \"name\": \"string\", \"sha\": \"string\", \"mime\": \"string\" } // добавленный файл\r\n  { \"type\": \"reasoning\", \"subtype\": \"stream\", \"token\": \"...\" }   // reasoning-поток (если включён)\r\n  ```\r\n\r\n  **Сохранение и метрики:**\r\n  - В процессе стрима: обновляет контент и `updates` сообщения; `updatedAt` у диалога.\r\n  - Метрики: latency, timeToFirstToken, timePerOutputToken, tokenCountTotal, messagesTotal.\r\n\r\n  **Ошибки:**\r\n  - 400 - невалидный запрос/длина/файл.\r\n  - 401 - нет сессии.\r\n  - 404 - диалог/сообщение не найден.\r\n  - 410 - модель недоступна.\r\n  - 429 - rate limit/лимиты.\r\n  - 500 - внутренняя ошибка.\r\n\r\n  ---\r\n\r\n  ##### 2. POST `/conversation/{id}/stop-generating` - прервать генерацию\r\n\r\n  **Запрос:**\r\n  ```jsonc\r\n  {} // без тела\r\n  ```\r\n\r\n  **Ответ:**\r\n  ```jsonc\r\n  {} // 200 OK\r\n  ```\r\n\r\n  **Поведение:**\r\n  - Помечает прерывание генерации для диалога, даёт обработчику корректно остановить стрим.\r\n  - Требует доступ по `authCondition(locals)`.\r\n\r\n  **Ошибки:**\r\n  - 401 - нет сессии.\r\n  - 404 - диалог не найден.\r\n\r\n  ---\r\n\r\n  #### Операции с сообщениями\r\n\r\n  ##### 1. DELETE `/api/conversation/{id}/message/{messageId}` - удалить сообщение\r\n\r\n  **Параметры пути:**\r\n  - `id` - ObjectId диалога\r\n  - `messageId` - UUID сообщения\r\n\r\n  **Запрос/тело:**\r\n  ```jsonc\r\n  {} // без тела\r\n  ```\r\n\r\n  **Ответ:**\r\n  ```jsonc\r\n  {} // 200 OK\r\n  ```\r\n\r\n  **Логика:**\r\n  - Проверяет доступ к диалогу.\r\n  - Удаляет выбранный узел и все его потомки; вычищает ссылки в `children` у оставшихся узлов.\r\n  - Сохраняет обновлённый массив `messages`.\r\n\r\n  **Ошибки:**\r\n  - 400 - невалидный `messageId`.\r\n  - 404 - диалог не найден.\r\n\r\n  ---\r\n\r\n  ##### 2. GET `/conversation/{id}/message/{messageId}/prompt` - получить собранный промпт\r\n\r\n  **Параметры пути:**\r\n  - `id` - ObjectId диалога или 7-символьный `shareId` (для публичного слепка)\r\n  - `messageId` - UUID сообщения\r\n\r\n  **Ответ (JSON):**\r\n  ```jsonc\r\n  {\r\n    \"prompt\": \"string\",          // финальный промпт, собранный до указанного сообщения\r\n    \"model\": \"string\",           // имя модели\r\n    \"assistant\": \"string|null\",  // имя ассистента (если есть)\r\n    \"parameters\": {              // фактические параметры генерации (модель + ассистент.generateSettings)\r\n      \"temperature\": 0.3,\r\n      \"top_p\": 0.95,\r\n      \"max_new_tokens\": 1024\r\n    },\r\n    \"messages\": [                // контекст (ветка) до messageId\r\n      {\r\n        \"role\": \"user|assistant|system\",\r\n        \"content\": \"string\",\r\n        \"createdAt\": \"Date\",\r\n        \"updatedAt\": \"Date\",\r\n        \"reasoning\": \"string|null\",\r\n        \"updates\": [\r\n          { \"type\": \"title\", \"title\": \"...\" },\r\n          { \"type\": \"webSearch\", \"subtype\": \"sources\" }\r\n        ],\r\n        \"files\": [\r\n          { \"type\": \"hash\", \"name\": \"string\", \"value\": \"sha256\", \"mime\": \"string\" }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n  ```\r\n\r\n  **Логика:**\r\n  - Для приватного диалога - проверяет доступ; для `shareId` - читает из публичной коллекции.\r\n  - Собирает ветку сообщений до `messageId` и строит промпт через шаблон модели.\r\n\r\n  **Ошибки:**\r\n  - 404 - диалог/сообщение/модель не найден.\r\n\r\n  ---\r\n\r\n  ##### 3. POST `/conversation/{id}/message/{messageId}/vote` - голос за ответ (лайк/дизлайк ответу)\r\n\r\n  **Параметры пути:**\r\n  - `id` - ObjectId диалога\r\n  - `messageId` - UUID сообщения\r\n\r\n  **Тело (JSON):**\r\n  ```jsonc\r\n  {\r\n    \"score\": -1 // -1 | 0 | 1; 0 - снять оценку\r\n  }\r\n  ```\r\n\r\n  **Ответ:**\r\n  ```jsonc\r\n  {} // 200 OK\r\n  ```\r\n\r\n  **Логика:**\r\n  - Проверяет доступ к диалогу.\r\n  - Записывает `messages.$.score` (или удаляет при `0`).\r\n  - Обновляет метрики по модели: `votesPositive`/`votesNegative`.\r\n\r\n  **Ошибки:**\r\n  - 400 - невалидное тело.\r\n  - 404 - сообщение не найдено в диалоге.\r\n\r\n  ---\r\n\r\n  #### Шаринг диалога\r\n\r\n  ##### 1. POST `/conversation/{id}/share` - создать публичный слепок диалога\r\n\r\n  **Параметры пути:**\r\n  - `id` - ObjectId приватного диалога\r\n\r\n  **Запрос/тело:**\r\n  ```jsonc\r\n  {} // без тела\r\n  ```\r\n\r\n  **Ответ (JSON):**\r\n  ```jsonc\r\n  {\r\n    \"shareId\": \"string\" // 7-символьный идентификатор публичного слепка\r\n  }\r\n  ```\r\n\r\n  **Логика:**\r\n  - Проверяет доступ к приватному диалогу.\r\n  - Строит хеш содержимого; если такой слепок уже есть - возвращает существующий `shareId`.\r\n  - Сохраняет копию: `messages`, `title`, `model`, `preprompt`, `assistantId`, `rootMessageId`.\r\n  - Копирует связанные файлы (переливает из `${conversationId}-*` в `${shareId}-*` в хранилище).\r\n\r\n  **Ошибки:**\r\n  - 404 - диалог не найден/нет доступа.\r\n\r\n  ---\r\n\r\n  #### Файлы сообщений\r\n\r\n  ##### 1. GET `/conversation/{id|shareId}/output/{sha256}` - скачать вложение\r\n\r\n  **Параметры пути:**\r\n  - `id|shareId` - либо ObjectId приватного диалога (с проверкой доступа), либо 7-символьный `shareId`\r\n  - `sha256` - хеш файла\r\n\r\n  **Запрос/тело:**\r\n  ```jsonc\r\n  {} // без тела\r\n  ```\r\n\r\n  **Ответ (байтовый поток):**\r\n  - Заголовки:\r\n  ```http\r\n  Content-Type: <mime или application/octet-stream>\r\n  Content-Disposition: attachment; filename=\"<sha256-prefix>.<ext>\"\r\n  Content-Security-Policy: default-src 'none'; script-src 'none'; style-src 'none'; sandbox;\r\n  ```\r\n\r\n  **Логика:**\r\n  - Для приватного `id` проверяет доступ к диалогу; для `shareId` - читает из публичной коллекции.\r\n  - Находит файл в файловом бакете по ключу, отдает бинарно.\r\n  - Имя файла формирует по `sha256` и определённому `mime`.\r\n\r\n  **Ошибки:**\r\n  - 401 - нет сессии (для приватного диалога).\r\n  - 404 - диалог/файл не найден.\r\n\r\n  ---\r\n\r\n  Итог:\r\n  - Диалоги: полный CRUD и листинг; авторизация по сессии, без `userId` в JSON; валидация и лимиты через Zod/`usageLimits`.\r\n  - Генерация: ядро общения - JSONL‑стрим событий с поддержкой ветвления (retry/continue), инструментов и файлов; отдельная ручка для остановки.\r\n  - Сообщения: удаление узла с поддеревом, получение точного промпта/контекста на момент сообщения, голосование с агрегированием метрик.\r\n  - Шаринг: создание стабильного публичного слепка с копированием артефактов; повторные запросы возвращают тот же `shareId`.\r\n  - Файлы: безопасная раздача вложений как для приватных диалогов (с ACL), так и для публичных слепков по `shareId`.\r\n\r\n\r\n### Ассистенты \r\n  - Ассистент - это пресет поверх модели: фиксирует `modelId`, `preprompt`, `tools`, RAG‑правила и параметры генерации.\r\n  - Можно:\r\n    - использовать “сырую” модель: указать `model` при создании диалога без `assistantId`;\r\n    - использовать ассистента: указать `assistantId` - подставятся его промпт/инструменты/настройки.\r\n\r\n#### **1. CRUD операции**\r\n\r\n##### **POST /api/assistant** - создать ассистента\r\n**Входные данные (multipart/form-data):**\r\n```json\r\n{\r\n  \"name\": \"string\",           // обязательное: 1-100 символов\r\n  \"description\": \"string\",    // опционально: описание\r\n  \"model\": \"string\",          // обязательное: ID модели\r\n  \"preprompt\": \"string\",      // опционально: системный промпт\r\n  \"avatar\": \"File\",           // опционально: изображение аватара\r\n  \"examples\": \"string[]\",     // опционально: примеры диалогов\r\n  \"tools\": \"string[]\",        // опционально: ID инструментов\r\n  \"generateSettings\": \"object\", // опционально: параметры генерации\r\n  \"rag\": \"object\"             // опционально: RAG настройки\r\n}\r\n```\r\n\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"_id\": \"string\",            // ObjectId созданного ассистента\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"model\": \"string\",\r\n  \"preprompt\": \"string\",\r\n  \"avatar\": \"string\",         // URL аватара\r\n  \"examples\": [\"string\"],\r\n  \"tools\": [\"string\"],\r\n  \"generateSettings\": {},\r\n  \"rag\": {},\r\n  \"createdAt\": \"Date\",\r\n  \"updatedAt\": \"Date\",\r\n  \"userId\": \"string\",         // ID создателя\r\n  \"isPublic\": false,          // по умолчанию приватный\r\n  \"subscribers\": 0,\r\n  \"conversations\": 0\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Валидирует все поля через `asssistantSchema`\r\n- Проверяет лимиты на количество ассистентов (`usageLimits.assistants`)\r\n- Загружает аватар в GridFS\r\n- Создаёт ассистента в MongoDB\r\n- Автоматически добавляет в настройки пользователя\r\n\r\n**Ошибки:**\r\n- 400 - невалидные данные\r\n- 413 - файл слишком большой\r\n- 429 - превышен лимит ассистентов\r\n\r\n---\r\n\r\n#####  **GET /api/assistant/{id}** - получить ассистента\r\n**Параметры:**\r\n- `id` - ObjectId ассистента\r\n\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"_id\": \"string\",\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"model\": \"string\",\r\n  \"preprompt\": \"string\",\r\n  \"avatar\": \"string\",\r\n  \"examples\": [\"string\"],\r\n  \"tools\": [\"string\"],\r\n  \"generateSettings\": {},\r\n  \"rag\": {},\r\n  \"createdAt\": \"Date\",\r\n  \"updatedAt\": \"Date\",\r\n  \"userId\": \"string\",\r\n  \"isPublic\": true,\r\n  \"subscribers\": 42,\r\n  \"conversations\": 156,\r\n  \"isSubscribed\": false,      // подписан ли текущий пользователь\r\n  \"canEdit\": true             // может ли редактировать\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Проверяет доступ (публичный или владелец)\r\n- Добавляет метаданные (подписки, статистика)\r\n- Проверяет права на редактирование\r\n\r\n**Ошибки:**\r\n- 404 - ассистент не найден\r\n- 403 - нет доступа\r\n\r\n---\r\n\r\n#####  **PATCH /api/assistant/{id}** - обновить ассистента\r\n**Входные данные (multipart/form-data):**\r\n```json\r\n{\r\n  \"name\": \"string\",           // опционально: новое имя\r\n  \"description\": \"string\",    // опционально: новое описание\r\n  \"model\": \"string\",          // опционально: новая модель\r\n  \"preprompt\": \"string\",      // опционально: новый промпт\r\n  \"avatar\": \"File\",           // опционально: новый аватар\r\n  \"examples\": \"string[]\",     // опционально: новые примеры\r\n  \"tools\": \"string[]\",        // опционально: новые инструменты\r\n  \"generateSettings\": \"object\", // опционально: новые параметры\r\n  \"rag\": \"object\"             // опционально: новые RAG настройки\r\n}\r\n```\r\n\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"_id\": \"string\",\r\n  \"name\": \"string\",\r\n  // ... обновлённые поля\r\n  \"updatedAt\": \"Date\"\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Проверяет права владельца\r\n- Валидирует только переданные поля\r\n- Обновляет аватар в GridFS если нужно\r\n- Сохраняет изменения в MongoDB\r\n\r\n**Ошибки:**\r\n- 403 - нет прав на редактирование\r\n- 400 - невалидные данные\r\n\r\n---\r\n\r\n#####  **DELETE /api/assistant/{id}** - удалить ассистента\r\n**Параметры:**\r\n- `id` - ObjectId ассистента\r\n\r\n**Выходные данные:**\r\n```json\r\n{} // 200 OK, пустое тело\r\n```\r\n\r\n**Логика:**\r\n- Проверяет права владельца\r\n- Удаляет аватар из GridFS\r\n- Удаляет ассистента из MongoDB\r\n- Удаляет из настроек пользователя\r\n- Удаляет все подписки\r\n\r\n**Ошибки:**\r\n- 403 - нет прав на удаление\r\n- 404 - ассистент не найден\r\n\r\n---\r\n\r\n#### **2. Списки и поиск**\r\n\r\n##### **GET /api/assistants** - список ассистентов\r\n**Входные параметры:**\r\n- `q` - поисковый запрос (опционально)\r\n- `category` - категория (опционально)\r\n- `model` - ID модели (опционально)\r\n- `sort` - сортировка: `newest`, `popular`, `name` (по умолчанию `newest`)\r\n- `p` - номер страницы (по умолчанию 0)\r\n- `limit` - количество на странице (по умолчанию 20)\r\n\r\n**Выходные данные:**\r\n```json\r\n[\r\n  {\r\n    \"_id\": \"string\",\r\n    \"name\": \"string\",\r\n    \"description\": \"string\",\r\n    \"avatar\": \"string\",\r\n    \"model\": \"string\",\r\n    \"isPublic\": true,\r\n    \"subscribers\": 42,\r\n    \"conversations\": 156,\r\n    \"createdAt\": \"Date\",\r\n    \"userId\": \"string\",\r\n    \"isSubscribed\": false\r\n  }\r\n]\r\n```\r\n\r\n**Логика:**\r\n- Фильтрует только публичных ассистентов\r\n- Применяет поиск по имени и описанию\r\n- Сортирует по выбранному критерию\r\n- Пагинация с лимитом\r\n\r\n---\r\n\r\n#####  **GET /api/user/assistants** - ассистенты пользователя\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"created\": [\r\n    {\r\n      \"_id\": \"string\",\r\n      \"name\": \"string\",\r\n      \"description\": \"string\",\r\n      \"avatar\": \"string\",\r\n      \"model\": \"string\",\r\n      \"isPublic\": false,\r\n      \"subscribers\": 0,\r\n      \"conversations\": 5,\r\n      \"createdAt\": \"Date\"\r\n    }\r\n  ],\r\n  \"subscribed\": [\r\n    {\r\n      \"_id\": \"string\",\r\n      \"name\": \"string\",\r\n      \"description\": \"string\",\r\n      \"avatar\": \"string\",\r\n      \"model\": \"string\",\r\n      \"isPublic\": true,\r\n      \"subscribers\": 42,\r\n      \"conversations\": 156,\r\n      \"subscribedAt\": \"Date\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Возвращает созданных пользователем ассистентов\r\n- Возвращает подписанных ассистентов\r\n- Сортирует по дате создания/подписки\r\n\r\n---\r\n\r\n#### **3. Подписки и взаимодействие**\r\n\r\n##### **POST /api/assistant/{id}/subscribe** - подписаться на ассистента\r\n**Параметры:**\r\n- `id` - ObjectId ассистента\r\n\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"subscribed\": true,\r\n  \"subscribers\": 43\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Проверяет что ассистент публичный\r\n- Добавляет подписку в настройки пользователя\r\n- Увеличивает счётчик подписчиков\r\n\r\n**Ошибки:**\r\n- 404 - ассистент не найден\r\n- 403 - ассистент приватный\r\n- 409 - уже подписан\r\n\r\n---\r\n\r\n#####  **DELETE /api/assistant/{id}/subscribe** - отписаться от ассистента\r\n**Параметры:**\r\n- `id` - ObjectId ассистента\r\n\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"subscribed\": false,\r\n  \"subscribers\": 42\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Удаляет подписку из настроек пользователя\r\n- Уменьшает счётчик подписчиков\r\n\r\n**Ошибки:**\r\n- 404 - ассистент не найден\r\n- 409 - не подписан\r\n\r\n---\r\n\r\n#### **4. Модерация и жалобы**\r\n\r\n#####  **POST /api/assistant/{id}/report** - пожаловаться на ассистента\r\n**Входные данные:**\r\n```json\r\n{\r\n  \"reason\": \"string\",         // причина жалобы\r\n  \"description\": \"string\"     // опционально: описание\r\n}\r\n```\r\n\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"reported\": true,\r\n  \"reportId\": \"string\"\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Создаёт жалобу в коллекции `reports`\r\n- Уведомляет модераторов\r\n- Может скрыть ассистента до рассмотрения\r\n\r\n---\r\n\r\n##### **PATCH /api/assistant/{id}/review** - модерация ассистента\r\n**Входные данные:**\r\n```json\r\n{\r\n  \"status\": \"approved\",       // \"approved\" | \"rejected\" | \"pending\"\r\n  \"reason\": \"string\"          // опционально: причина решения\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Только для админов\r\n- Изменяет статус модерации\r\n- Уведомляет создателя о решении\r\n\r\n---\r\n\r\n#### **5. Статистика и аналитика**\r\n\r\n#####  **GET /api/assistant/{id}/stats** - статистика использования\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"subscribers\": 42,\r\n  \"conversations\": 156,\r\n  \"messages\": 2847,\r\n  \"avgRating\": 4.2,\r\n  \"totalVotes\": 89,\r\n  \"usageByDay\": [\r\n    { \"date\": \"2024-01-15\", \"conversations\": 12, \"messages\": 234 }\r\n  ],\r\n  \"topModels\": [\r\n    { \"model\": \"meta-llama/Llama-2-70b\", \"count\": 45 }\r\n  ]\r\n}\r\n```\r\n\r\n---\r\n\r\n#####  **GET /api/assistant/{id}/conversations** - диалоги с ассистентом\r\n**Входные параметры:**\r\n- `p` - номер страницы (по умолчанию 0)\r\n- `limit` - количество на странице (по умолчанию 20)\r\n\r\n**Выходные данные:**\r\n```json\r\n[\r\n  {\r\n    \"_id\": \"string\",\r\n    \"title\": \"string\",\r\n    \"createdAt\": \"Date\",\r\n    \"updatedAt\": \"Date\",\r\n    \"messageCount\": 15,\r\n    \"userId\": \"string\"\r\n  }\r\n]\r\n```\r\n\r\n---\r\n\r\n#### **6. Публикация и видимость**\r\n\r\n##### **POST /api/assistant/{id}/publish** - опубликовать ассистента\r\n**Логика:**\r\n- Проверяет права владельца\r\n- Устанавливает `isPublic: true`\r\n- Добавляет в каталог публичных ассистентов\r\n\r\n---\r\n\r\n##### **POST /api/assistant/{id}/unpublish** - снять с публикации\r\n**Логика:**\r\n- Устанавливает `isPublic: false`\r\n- Удаляет из каталога\r\n- Сохраняет подписчиков\r\n\r\n---\r\n\r\n#####  **GET /api/assistant/{id}/public** - получить публичную информацию\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"_id\": \"string\",\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"avatar\": \"string\",\r\n  \"model\": \"string\",\r\n  \"examples\": [\"string\"],\r\n  \"isPublic\": true,\r\n  \"subscribers\": 42,\r\n  \"conversations\": 156,\r\n  \"createdAt\": \"Date\"\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Возвращает только публичную информацию\r\n- Не требует авторизации\r\n- Не показывает приватные данные\r\n\r\n---\r\n\r\n#### **7. Импорт/экспорт**\r\n\r\n#####  **POST /api/assistant/import** - импортировать ассистента\r\n**Входные данные:**\r\n```json\r\n{\r\n  \"data\": \"string\",           // JSON данные ассистента\r\n  \"name\": \"string\"            // опционально: новое имя\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Валидирует импортируемые данные\r\n- Создаёт нового ассистента\r\n- Обрабатывает конфликты имён\r\n\r\n---\r\n\r\n##### **GET /api/assistant/{id}/export** - экспортировать ассистента\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"model\": \"string\",\r\n  \"preprompt\": \"string\",\r\n  \"examples\": [\"string\"],\r\n  \"tools\": [\"string\"],\r\n  \"generateSettings\": {},\r\n  \"rag\": {},\r\n  \"exportedAt\": \"Date\",\r\n  \"version\": \"1.0\"\r\n}\r\n```\r\n\r\n---\r\n\r\n#### **8. Шаринг и копирование**\r\n\r\n##### **POST /api/assistant/{id}/share** - создать публичную ссылку\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"shareId\": \"abc1234\",       // 7-символьный ID\r\n  \"url\": \"https://chat.example.com/assistant/abc1234\",\r\n  \"expiresAt\": \"Date\"         // опционально: время истечения\r\n}\r\n```\r\n\r\n---\r\n\r\n#####  **POST /api/assistant/{id}/fork** - скопировать ассистента\r\n**Входные данные:**\r\n```json\r\n{\r\n  \"name\": \"string\"            // опционально: новое имя\r\n}\r\n```\r\n\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"_id\": \"string\",            // ID нового ассистента\r\n  \"name\": \"string\",\r\n  \"forkedFrom\": \"string\"      // ID оригинального ассистента\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Копирует все настройки ассистента\r\n- Создаёт новый ассистент для текущего пользователя\r\n- Сохраняет ссылку на оригинал\r\n\r\n\r\nВот структурированная документация по инструментам:\r\n\r\n### Инструменты \r\n\r\nИнструменты - это расширения функциональности ассистентов, которые позволяют им выполнять внешние действия и получать доступ к различным сервисам и API. Инструменты расширяют возможности ассистентов за пределы простого текстового общения.\r\n\r\n**Как работают инструменты:**\r\n- Ассистент анализирует запрос пользователя\r\n- Определяет, нужен ли инструмент для выполнения задачи\r\n- Вызывает соответствующий инструмент с необходимыми параметрами\r\n- Получает результат и интегрирует его в ответ\r\n\r\n**Типы инструментов:**\r\n- **Веб-поиск** - поиск актуальной информации в интернете\r\n- **Калькулятор** - выполнение математических вычислений\r\n- **Парсер документов** - извлечение текста из PDF, Word, изображений\r\n- **Генератор изображений** - создание изображений по текстовому описанию\r\n- **API-интеграции** - подключение к внешним сервисам (погода, новости, базы данных)\r\n- **Специализированные** - инструменты для конкретных доменов (медицина, право, программирование)\r\n\r\n#### **1. CRUD операции**\r\n\r\n##### **POST /api/tools** - создать инструмент\r\n**Входные данные (multipart/form-data):**\r\n```json\r\n{\r\n  \"name\": \"string\",           // обязательное: 1-100 символов\r\n  \"description\": \"string\",    // обязательное: описание функциональности\r\n  \"category\": \"string\",       // обязательное: категория инструмента\r\n  \"icon\": \"File\",             // опционально: иконка инструмента\r\n  \"schema\": \"object\",         // обязательное: JSON Schema для параметров\r\n  \"endpoint\": \"string\",       // обязательное: URL эндпоинта\r\n  \"method\": \"string\",         // обязательное: HTTP метод (GET, POST, PUT, DELETE)\r\n  \"headers\": \"object\",        // опционально: заголовки запроса\r\n  \"auth\": \"object\",           // опционально: настройки аутентификации\r\n  \"rateLimit\": \"number\",      // опционально: лимит запросов в минуту\r\n  \"isPublic\": false,          // опционально: публичный ли инструмент\r\n  \"tags\": \"string[]\"          // опционально: теги для поиска\r\n}\r\n```\r\n\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"_id\": \"string\",            // ObjectId созданного инструмента\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"category\": \"string\",\r\n  \"icon\": \"string\",           // URL иконки\r\n  \"schema\": {},\r\n  \"endpoint\": \"string\",\r\n  \"method\": \"string\",\r\n  \"headers\": {},\r\n  \"auth\": {},\r\n  \"rateLimit\": 60,\r\n  \"isPublic\": false,\r\n  \"tags\": [\"string\"],\r\n  \"createdAt\": \"Date\",\r\n  \"updatedAt\": \"Date\",\r\n  \"userId\": \"string\",         // ID создателя\r\n  \"usageCount\": 0,\r\n  \"rating\": 0,\r\n  \"reports\": 0\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Валидирует схему через JSON Schema\r\n- Проверяет доступность эндпоинта\r\n- Загружает иконку в GridFS\r\n- Создаёт инструмент в MongoDB\r\n- Проверяет лимиты на количество инструментов\r\n\r\n**Ошибки:**\r\n- 400 - невалидные данные или схема\r\n- 413 - файл иконки слишком большой\r\n- 429 - превышен лимит инструментов\r\n- 422 - недоступный эндпоинт\r\n\r\n---\r\n\r\n##### **GET /api/tools/{toolId}** - получить инструмент\r\n**Параметры:**\r\n- `toolId` - ObjectId инструмента\r\n\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"_id\": \"string\",\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"category\": \"string\",\r\n  \"icon\": \"string\",\r\n  \"schema\": {},\r\n  \"endpoint\": \"string\",\r\n  \"method\": \"string\",\r\n  \"headers\": {},\r\n  \"auth\": {},\r\n  \"rateLimit\": 60,\r\n  \"isPublic\": true,\r\n  \"tags\": [\"string\"],\r\n  \"createdAt\": \"Date\",\r\n  \"updatedAt\": \"Date\",\r\n  \"userId\": \"string\",\r\n  \"usageCount\": 42,\r\n  \"rating\": 4.2,\r\n  \"reports\": 0,\r\n  \"canEdit\": true,            // может ли редактировать\r\n  \"isSubscribed\": false       // подписан ли на обновления\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Проверяет доступ (публичный или владелец)\r\n- Добавляет метаданные использования\r\n- Проверяет права на редактирование\r\n\r\n**Ошибки:**\r\n- 404 - инструмент не найден\r\n- 403 - нет доступа\r\n\r\n---\r\n\r\n##### **PATCH /api/tools/{toolId}** - обновить инструмент\r\n**Входные данные (multipart/form-data):**\r\n```json\r\n{\r\n  \"name\": \"string\",           // опционально: новое имя\r\n  \"description\": \"string\",    // опционально: новое описание\r\n  \"category\": \"string\",       // опционально: новая категория\r\n  \"icon\": \"File\",             // опционально: новая иконка\r\n  \"schema\": \"object\",         // опционально: новая схема\r\n  \"endpoint\": \"string\",       // опционально: новый эндпоинт\r\n  \"method\": \"string\",         // опционально: новый метод\r\n  \"headers\": \"object\",        // опционально: новые заголовки\r\n  \"auth\": \"object\",           // опционально: новые настройки аутентификации\r\n  \"rateLimit\": \"number\",      // опционально: новый лимит\r\n  \"isPublic\": false,          // опционально: изменить видимость\r\n  \"tags\": \"string[]\"          // опционально: новые теги\r\n}\r\n```\r\n\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"_id\": \"string\",\r\n  \"name\": \"string\",\r\n  // ... обновлённые поля\r\n  \"updatedAt\": \"Date\"\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Проверяет права владельца\r\n- Валидирует только переданные поля\r\n- Обновляет иконку в GridFS если нужно\r\n- Сохраняет изменения в MongoDB\r\n\r\n**Ошибки:**\r\n- 403 - нет прав на редактирование\r\n- 400 - невалидные данные\r\n\r\n---\r\n\r\n##### **DELETE /api/tools/{toolId}** - удалить инструмент\r\n**Параметры:**\r\n- `toolId` - ObjectId инструмента\r\n\r\n**Выходные данные:**\r\n```json\r\n{} // 200 OK, пустое тело\r\n```\r\n\r\n**Логика:**\r\n- Проверяет права владельца\r\n- Удаляет иконку из GridFS\r\n- Удаляет инструмент из MongoDB\r\n- Удаляет все связанные подписки и использования\r\n\r\n**Ошибки:**\r\n- 403 - нет прав на удаление\r\n- 404 - инструмент не найден\r\n\r\n---\r\n\r\n#### **2. Поиск и каталог**\r\n\r\n##### **GET /api/tools/search** - поиск инструментов\r\n**Входные параметры:**\r\n- `q` - поисковый запрос (опционально)\r\n- `category` - категория (опционально)\r\n- `tags` - теги через запятую (опционально)\r\n- `sort` - сортировка: `newest`, `popular`, `rating`, `name` (по умолчанию `popular`)\r\n- `p` - номер страницы (по умолчанию 0)\r\n- `limit` - количество на странице (по умолчанию 20)\r\n- `isPublic` - только публичные (по умолчанию true)\r\n\r\n**Выходные данные:**\r\n```json\r\n[\r\n  {\r\n    \"_id\": \"string\",\r\n    \"name\": \"string\",\r\n    \"description\": \"string\",\r\n    \"category\": \"string\",\r\n    \"icon\": \"string\",\r\n    \"tags\": [\"string\"],\r\n    \"isPublic\": true,\r\n    \"usageCount\": 42,\r\n    \"rating\": 4.2,\r\n    \"createdAt\": \"Date\",\r\n    \"userId\": \"string\",\r\n    \"isSubscribed\": false\r\n  }\r\n]\r\n```\r\n\r\n**Логика:**\r\n- Фильтрует по категории и тегам\r\n- Применяет поиск по имени, описанию и тегам\r\n- Сортирует по выбранному критерию\r\n- Пагинация с лимитом\r\n\r\n---\r\n\r\n##### **GET /api/tools/categories** - получить список категорий\r\n**Выходные данные:**\r\n```json\r\n[\r\n  {\r\n    \"name\": \"string\",         // название категории\r\n    \"count\": 42,              // количество инструментов\r\n    \"description\": \"string\"   // описание категории\r\n  }\r\n]\r\n```\r\n\r\n**Логика:**\r\n- Возвращает все доступные категории\r\n- Подсчитывает количество инструментов в каждой\r\n- Сортирует по популярности\r\n\r\n---\r\n\r\n#### **3. Использование и интеграция**\r\n\r\n##### **POST /api/tools/{toolId}/execute** - выполнить инструмент\r\n**Входные данные:**\r\n```json\r\n{\r\n  \"parameters\": {},           // параметры согласно schema\r\n  \"conversationId\": \"string\", // опционально: ID диалога\r\n  \"messageId\": \"string\"       // опционально: ID сообщения\r\n}\r\n```\r\n\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"result\": {},               // результат выполнения\r\n  \"executionTime\": 150,       // время выполнения в мс\r\n  \"status\": \"success\",        // \"success\" | \"error\" | \"timeout\"\r\n  \"error\": \"string\"           // опционально: сообщение об ошибке\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Валидирует параметры по schema\r\n- Проверяет rate limit\r\n- Выполняет HTTP запрос к эндпоинту\r\n- Логирует использование\r\n- Возвращает результат\r\n\r\n**Ошибки:**\r\n- 400 - невалидные параметры\r\n- 404 - инструмент не найден\r\n- 429 - превышен rate limit\r\n- 500 - ошибка выполнения\r\n\r\n---\r\n\r\n##### **GET /api/tools/{toolId}/usage** - статистика использования\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"totalExecutions\": 1250,\r\n  \"successRate\": 0.95,\r\n  \"avgExecutionTime\": 200,\r\n  \"usageByDay\": [\r\n    { \"date\": \"2024-01-15\", \"executions\": 45 }\r\n  ],\r\n  \"topUsers\": [\r\n    { \"userId\": \"string\", \"executions\": 23 }\r\n  ],\r\n  \"errorRate\": 0.05\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Агрегирует данные использования\r\n- Вычисляет метрики производительности\r\n- Показывает тренды использования\r\n\r\n---\r\n\r\n#### **4. Подписки и взаимодействие**\r\n\r\n##### **POST /api/tools/{toolId}/subscribe** - подписаться на обновления\r\n**Параметры:**\r\n- `toolId` - ObjectId инструмента\r\n\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"subscribed\": true,\r\n  \"subscribers\": 43\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Добавляет подписку в настройки пользователя\r\n- Уведомляет о новых версиях инструмента\r\n- Увеличивает счётчик подписчиков\r\n\r\n**Ошибки:**\r\n- 404 - инструмент не найден\r\n- 409 - уже подписан\r\n\r\n---\r\n\r\n##### **DELETE /api/tools/{toolId}/subscribe** - отписаться от обновлений\r\n**Параметры:**\r\n- `toolId` - ObjectId инструмента\r\n\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"subscribed\": false,\r\n  \"subscribers\": 42\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Удаляет подписку из настроек пользователя\r\n- Уменьшает счётчик подписчиков\r\n\r\n**Ошибки:**\r\n- 404 - инструмент не найден\r\n- 409 - не подписан\r\n\r\n---\r\n\r\n#### **5. Модерация и жалобы**\r\n\r\n##### **POST /api/tools/{toolId}/report** - пожаловаться на инструмент\r\n**Входные данные:**\r\n```json\r\n{\r\n  \"reason\": \"string\",         // причина жалобы\r\n  \"description\": \"string\",    // опционально: описание\r\n  \"evidence\": \"string[]\"      // опционально: ссылки на доказательства\r\n}\r\n```\r\n\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"reported\": true,\r\n  \"reportId\": \"string\"\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Создаёт жалобу в коллекции `reports`\r\n- Уведомляет модераторов\r\n- Может временно скрыть инструмент\r\n\r\n---\r\n\r\n##### **PATCH /api/tools/{toolId}/review** - модерация инструмента\r\n**Входные данные:**\r\n```json\r\n{\r\n  \"status\": \"approved\",       // \"approved\" | \"rejected\" | \"pending\"\r\n  \"reason\": \"string\",         // опционально: причина решения\r\n  \"notes\": \"string\"           // опционально: заметки модератора\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Только для админов\r\n- Изменяет статус модерации\r\n- Уведомляет создателя о решении\r\n- Может скрыть/показать инструмент\r\n\r\n---\r\n\r\n#### **6. Рейтинг и отзывы**\r\n\r\n##### **POST /api/tools/{toolId}/rate** - оценить инструмент\r\n**Входные данные:**\r\n```json\r\n{\r\n  \"rating\": 5,                // 1-5 звёзд\r\n  \"review\": \"string\"          // опционально: текстовый отзыв\r\n}\r\n```\r\n\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"rated\": true,\r\n  \"averageRating\": 4.3,\r\n  \"totalRatings\": 89\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Обновляет рейтинг инструмента\r\n- Сохраняет отзыв пользователя\r\n- Пересчитывает средний рейтинг\r\n\r\n**Ошибки:**\r\n- 400 - невалидный рейтинг\r\n- 404 - инструмент не найден\r\n- 409 - уже оценён\r\n\r\n---\r\n\r\n##### **GET /api/tools/{toolId}/reviews** - получить отзывы\r\n**Входные параметры:**\r\n- `p` - номер страницы (по умолчанию 0)\r\n- `limit` - количество на странице (по умолчанию 10)\r\n\r\n**Выходные данные:**\r\n```json\r\n[\r\n  {\r\n    \"rating\": 5,\r\n    \"review\": \"string\",\r\n    \"userId\": \"string\",\r\n    \"userName\": \"string\",\r\n    \"createdAt\": \"Date\"\r\n  }\r\n]\r\n```\r\n\r\n**Логика:**\r\n- Возвращает отзывы с пагинацией\r\n- Сортирует по дате создания\r\n- Показывает только публичные отзывы\r\n\r\n---\r\n\r\n#### **7. Импорт/экспорт**\r\n\r\n##### **POST /api/tools/import** - импортировать инструмент\r\n**Входные данные:**\r\n```json\r\n{\r\n  \"data\": \"string\",           // JSON данные инструмента\r\n  \"name\": \"string\"            // опционально: новое имя\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Валидирует импортируемые данные\r\n- Проверяет доступность эндпоинта\r\n- Создаёт новый инструмент\r\n- Обрабатывает конфликты имён\r\n\r\n---\r\n\r\n##### **GET /api/tools/{toolId}/export** - экспортировать инструмент\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"category\": \"string\",\r\n  \"schema\": {},\r\n  \"endpoint\": \"string\",\r\n  \"method\": \"string\",\r\n  \"headers\": {},\r\n  \"auth\": {},\r\n  \"exportedAt\": \"Date\",\r\n  \"version\": \"1.0\"\r\n}\r\n```\r\n\r\n---\r\n\r\n#### **8. Шаринг и копирование**\r\n\r\n##### **POST /api/tools/{toolId}/share** - создать публичную ссылку\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"shareId\": \"abc1234\",       // 7-символьный ID\r\n  \"url\": \"https://chat.example.com/tools/abc1234\",\r\n  \"expiresAt\": \"Date\"         // опционально: время истечения\r\n}\r\n```\r\n\r\n---\r\n\r\n##### **POST /api/tools/{toolId}/fork** - скопировать инструмент\r\n**Входные данные:**\r\n```json\r\n{\r\n  \"name\": \"string\"            // опционально: новое имя\r\n}\r\n```\r\n\r\n**Выходные данные:**\r\n```json\r\n{\r\n  \"_id\": \"string\",            // ID нового инструмента\r\n  \"name\": \"string\",\r\n  \"forkedFrom\": \"string\"      // ID оригинального инструмента\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Копирует все настройки инструмента\r\n- Создаёт новый инструмент для текущего пользователя\r\n- Сохраняет ссылку на оригинал\r\n\r\n---\r\n\r\n#### **9. Категории инструментов**\r\n\r\n**Основные категории:**\r\n- **Поиск и информация** - веб-поиск, новости, справочники\r\n- **Вычисления** - калькулятор, статистика, анализ данных\r\n- **Медиа** - генерация изображений, обработка видео, аудио\r\n- **Документы** - парсинг PDF, конвертация форматов, OCR\r\n- **Коммуникация** - email, SMS, уведомления, социальные сети\r\n- **Продуктивность** - календарь, задачи, заметки, планирование\r\n- **Разработка** - API тестирование, код-анализ, деплой\r\n- **Бизнес** - CRM, аналитика, финансы, отчеты\r\n- **Образование** - переводчики, обучающие материалы, тесты\r\n- **Развлечения** - игры, генераторы контента, развлечения\r\n\r\n**Специальные категории:**\r\n- **Системные** - мониторинг, логи, диагностика\r\n- **Безопасность** - шифрование, аутентификация, аудит\r\n- **Интеграции** - подключение к внешним сервисам\r\n- **Экспериментальные** - новые и тестовые инструменты\r\n\r\n### Модели\r\n\r\n#### **1. GET /api/models** - список доступных моделей\r\n\r\n**Выходные данные:**\r\n```json\r\n[\r\n  {\r\n    \"id\": \"string\",              // уникальный ID модели\r\n    \"name\": \"string\",            // отображаемое имя\r\n    \"websiteUrl\": \"string\",      // URL сайта модели\r\n    \"modelUrl\": \"string\",        // URL модели на Hugging Face\r\n    \"tokenizer\": \"string\",       // токенизатор модели\r\n    \"datasetName\": \"string\",     // название датасета\r\n    \"datasetUrl\": \"string\",      // URL датасета\r\n    \"displayName\": \"string\",     // отображаемое имя\r\n    \"description\": \"string\",     // описание модели\r\n    \"logoUrl\": \"string\",         // URL логотипа\r\n    \"promptExamples\": [          // примеры промптов\r\n      {\r\n        \"title\": \"string\",\r\n        \"prompt\": \"string\"\r\n      }\r\n    ],\r\n    \"preprompt\": \"string\",       // системный промпт по умолчанию\r\n    \"multimodal\": false,         // поддерживает ли мультимодальность\r\n    \"unlisted\": false,           // скрыта ли из списка\r\n    \"tools\": false,              // поддерживает ли инструменты\r\n    \"hasInferenceAPI\": false     // есть ли Inference API\r\n  }\r\n]\r\n```\r\n\r\n**Логика:**\r\n- Возвращает только публично доступные модели (`unlisted: false`)\r\n- Включает базовую информацию о каждой модели\r\n- Показывает поддержку инструментов и мультимодальности\r\n- Предоставляет примеры использования\r\n\r\n### Пользователи\r\n\r\n#### Профиль\r\n\r\n##### 1. GET `/api/user` - получить данные пользователя\r\n\r\n**Запрос:**\r\n```jsonc\r\n{} // без тела\r\n```\r\n\r\n**Ответ (JSON):**\r\n```jsonc\r\n{\r\n  \"id\": \"string\",           // ObjectId пользователя\r\n  \"username\": \"string\",     // username из OIDC провайдера\r\n  \"name\": \"string\",         // display name\r\n  \"email\": \"string\",        // email адрес\r\n  \"avatarUrl\": \"string\",    // URL аватара из провайдера\r\n  \"hfUserId\": \"string\"      // Hugging Face user ID (если провайдер HF)\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Проверяет наличие `locals.user` (залогиненный пользователь).\r\n- Возвращает данные из сессии пользователя.\r\n\r\n**Ошибки:**\r\n- 401 - пользователь не авторизован.\r\n\r\n---\r\n\r\n#### Настройки и подписки\r\n\r\n##### 2. GET `/api/user/assistants` - ассистенты пользователя\r\n\r\n**Запрос:**\r\n```jsonc\r\n{} // без тела\r\n```\r\n\r\n**Ответ (JSON):**\r\n```jsonc\r\n[\r\n  {\r\n    \"_id\": \"string\",                    // ObjectId ассистента\r\n    \"name\": \"string\",                   // название ассистента\r\n    \"description\": \"string\",            // описание\r\n    \"modelId\": \"string\",                // ID модели\r\n    \"preprompt\": \"string\",              // системный промпт\r\n    \"tools\": [\"string\"],                // подключённые инструменты\r\n    \"exampleInputs\": [\"string\"],        // примеры запросов\r\n    \"avatar\": \"string\",                 // хеш аватара\r\n    \"createdAt\": \"Date\",                // дата создания\r\n    \"updatedAt\": \"Date\",                // дата обновления\r\n    \"userCount\": 42,                    // количество подписчиков\r\n    \"review\": \"PRIVATE|PENDING|APPROVED|DENIED\", // статус модерации\r\n    \"rag\": {                            // RAG-настройки\r\n      \"allowedLinks\": [\"string\"],\r\n      \"allowedDomains\": [\"string\"],\r\n      \"allowAllDomains\": false\r\n    },\r\n    \"generateSettings\": {               // параметры генерации\r\n      \"temperature\": 0.3,\r\n      \"top_p\": 0.95,\r\n      \"repetition_penalty\": 1.2,\r\n      \"top_k\": 50\r\n    },\r\n    \"createdById\": \"string\",            // ID создателя (скрыт в ответе)\r\n    \"createdByMe\": true                  // создан ли текущим пользователем\r\n  }\r\n]\r\n```\r\n\r\n**Логика:**\r\n- Проверяет наличие сессии (`locals.user._id` или `locals.sessionId`).\r\n- Получает настройки пользователя с подписками на ассистентов.\r\n- Находит ассистентов из последних 300 диалогов пользователя.\r\n- Объединяет подписанных ассистентов и ассистентов из диалогов.\r\n- Фильтрует только тех, на которых пользователь подписан.\r\n- Добавляет флаг `createdByMe` для каждого ассистента.\r\n\r\n**Ошибки:**\r\n- 401 - нет сессии/пользователя.\r\n\r\n---\r\n\r\n#### Админ-функции\r\n\r\n##### 3. POST `/api/user/validate-token` - валидация админ-токена\r\n\r\n**Запрос (JSON):**\r\n```jsonc\r\n{\r\n  \"token\": \"string\"  // админ-токен для проверки\r\n}\r\n```\r\n\r\n**Ответ (JSON):**\r\n```jsonc\r\n{\r\n  \"valid\": true  // true если токен валидный, false если нет\r\n}\r\n```\r\n\r\n**Логика:**\r\n- Валидирует входные данные через Zod схему.\r\n- Проверяет токен через `adminTokenManager.checkToken(token, sessionId)`.\r\n- Возвращает результат валидации.\r\n\r\n**Ошибки:**\r\n- 400 - невалидное тело запроса (отсутствует или некорректный `token`).\r\n\r\n---\r\n\r\n#### Общие особенности\r\n\r\n**Аутентификация:**\r\n- Все ручки требуют авторизованного пользователя (`locals.user`).\r\n- Сессия создаётся через OIDC callback при логине.\r\n\r\n**Ограничения:**\r\n- Нет ручек для обновления профиля пользователя.\r\n- Изменения профиля происходят только через внешний OIDC провайдер.\r\n- Админ-токены управляются отдельной системой (`adminTokenManager`).\r\n\r\n**Данные пользователя:**\r\n- Хранятся в коллекции `users` с полями: `_id`, `username`, `name`, `email`, `avatarUrl`, `hfUserId`, `createdAt`, `updatedAt`.\r\n- Связаны с настройками через `userId` в коллекции `settings`.\r\n\r\n### Аутентификация \r\n\r\n#### OIDC авторизация\r\n\r\n##### 1. GET `/login` - авторизация через OIDC\r\n\r\n**Запрос:**\r\n- Параметры query (опционально):\r\n  - `callback` - альтернативный redirect URI\r\n\r\n**Ответ:**\r\n- HTTP 302 редирект на OIDC провайдера\r\n\r\n**Логика:**\r\n- Получает `referer` из заголовков для определения базового URL.\r\n- Формирует `redirectURI` по умолчанию: `${origin}${base}/login/callback`.\r\n- Если передан `callback` и он в списке разрешённых (`ALTERNATIVE_REDIRECT_URLS`) - использует его.\r\n- Генерирует authorization URL через `getOIDCAuthorizationUrl()` с CSRF-токеном.\r\n- Редиректит пользователя на провайдера.\r\n\r\n**Ошибки:**\r\n- 500 - ошибка генерации authorization URL.\r\n\r\n---\r\n\r\n##### 2. GET `/login/callback?code=&state=&iss=` - обработка callback авторизации\r\n\r\n**Параметры query:**\r\n- `code` - authorization code от провайдера\r\n- `state` - base64-encoded CSRF токен\r\n- `iss` - issuer URL (опционально, для мульти-провайдеров)\r\n\r\n**Ответ:**\r\n- HTTP 302 редирект на главную страницу (`${base}/`)\r\n\r\n**Логика:**\r\n- Декодирует `state` из base64 и валидирует CSRF токен.\r\n- Обменивает `code` на токены доступа через `getOIDCUserData()`.\r\n- Получает данные пользователя (email, username, name, avatar).\r\n- Применяет allow-лист:\r\n  - Проверяет `ALLOWED_USER_EMAILS` (точные email).\r\n  - Проверяет `ALLOWED_USER_DOMAINS` (домены email).\r\n  - Требует верифицированный email.\r\n- Создаёт или обновляет пользователя через `updateUser()`:\r\n  - Сохраняет в коллекцию `users`.\r\n  - Создаёт сессию в коллекции `sessions`.\r\n  - Устанавливает HTTP-only cookie с `sessionId`.\r\n\r\n**Ошибки:**\r\n- 400 - ошибка OIDC (`error` параметр в query).\r\n- 403 - невалидный CSRF токен или пользователь не в allow-листе.\r\n- 500 - ошибка обмена токенов или сохранения пользователя.\r\n\r\n---\r\n\r\n#### Выход\r\n\r\n##### 3. POST `/logout` - выход из системы\r\n\r\n**Запрос:**\r\n```jsonc\r\n{} // без тела\r\n```\r\n\r\n**Ответ:**\r\n- HTTP 302 редирект на главную страницу (`${base}/`)\r\n\r\n**Логика:**\r\n- Удаляет сессию из коллекции `sessions` по `sessionId`.\r\n- Удаляет HTTP-only cookie:\r\n  - `path: \"/\"`\r\n  - `sameSite: \"lax\"` (dev) или `\"none\"` (prod)\r\n  - `secure: true` (prod) или `false` (dev/insecure)\r\n  - `httpOnly: true`\r\n\r\n**Ошибки:**\r\n- Нет специфических ошибок (всегда редирект).\r\n\r\n---\r\n\r\n### Администрирование \r\n\r\n#### Экспорт данных\r\n\r\n##### 1. POST `/admin/export` - экспорт диалогов в Parquet\r\n\r\n**Запрос (JSON):**\r\n```jsonc\r\n{\r\n  \"model\": \"string\"  // модель для фильтрации диалогов\r\n}\r\n```\r\n\r\n**Запрос (заголовки):**\r\n```http\r\nAuthorization: Bearer <ADMIN_API_SECRET>\r\nContent-Type: application/json\r\n```\r\n\r\n**Ответ:**\r\n```jsonc\r\n{} // 200 OK, пустое тело (асинхронная операция)\r\n```\r\n\r\n**Логика:**\r\n- Проверяет наличие `PARQUET_EXPORT_DATASET` и `PARQUET_EXPORT_HF_TOKEN`.\r\n- Валидирует `model` параметр.\r\n- Создаёт Parquet схему с полями: `title`, `created_at`, `updated_at`, `messages[]`.\r\n- Экспортирует диалоги в два потока:\r\n  - Гостевые сессии (`sessionId` exists, `userId` не существует).\r\n  - Авторизованные пользователи (`userId` exists).\r\n- Фильтрует только диалоги с `shareConversationsWithModelAuthors: true`.\r\n- Создаёт временный файл `/tmp/conversations-{date}-{timestamp}.parquet`.\r\n- Загружает файл в Hugging Face Hub через `uploadFile()`.\r\n- Удаляет временный файл.\r\n\r\n**Ошибки:**\r\n- 500 - не настроен экспорт (`PARQUET_EXPORT_*` переменные).\r\n- 400 - невалидный `model`.\r\n\r\n---\r\n\r\n#### Статистика\r\n\r\n##### 2. POST `/admin/stats/compute` - пересчёт статистики\r\n\r\n**Запрос:**\r\n```jsonc\r\n{} // без тела\r\n```\r\n\r\n**Запрос (заголовки):**\r\n```http\r\nAuthorization: Bearer <ADMIN_API_SECRET>\r\n```\r\n\r\n**Ответ (JSON):**\r\n```jsonc\r\n{\r\n  \"message\": \"Stats job started\"\r\n}\r\n```\r\n- HTTP 202 Accepted\r\n\r\n**Логика:**\r\n- Запускает асинхронный job `computeAllStats()`.\r\n- Не ждёт завершения (fire-and-forget).\r\n- Логирует ошибки в случае сбоя.\r\n\r\n**Ошибки:**\r\n- Нет специфических ошибок (job запускается асинхронно).\r\n\r\n---\r\n\r\n#### Общие особенности\r\n\r\n**Безопасность:**\r\n- OIDC callback защищён CSRF токенами.\r\n- Allow-лист по email/доменам для контроля доступа.\r\n- Админ-ручки требуют `ADMIN_API_SECRET` в заголовке `Authorization: Bearer`.\r\n\r\n**Конфигурация:**\r\n- `OPENID_CONFIG` - настройки OIDC провайдера.\r\n- `ALLOWED_USER_EMAILS` - разрешённые email адреса.\r\n- `ALLOWED_USER_DOMAINS` - разрешённые домены email.\r\n- `ALTERNATIVE_REDIRECT_URLS` - альтернативные callback URL.\r\n- `PARQUET_EXPORT_*` - настройки экспорта данных.\r\n\r\n**Сессии:**\r\n- Хранятся в коллекции `sessions` с полями: `sessionId`, `userId`, `createdAt`, `expiresAt`.\r\n- Cookie настраивается в зависимости от окружения (dev/prod).\r\n\r\n**Метрики:**\r\n- Статистика включает подсчёт диалогов, сообщений, голосов по моделям.\r\n- Экспорт данных для анализа качества моделей.\r\n\r\n### Системные \r\n\r\n#### Здоровье\r\n\r\n##### 1. GET `/healthcheck` - проверка здоровья системы\r\n\r\n**Запрос:**\r\n```jsonc\r\n{} // без тела\r\n```\r\n\r\n**Ответ:**\r\n```jsonc\r\n\"OK\" // строка\r\n```\r\n- HTTP 200 OK\r\n\r\n**Логика:**\r\n- Простая проверка доступности сервиса.\r\n- Возвращает статическую строку \"OK\".\r\n- Используется для мониторинга и load balancer health checks.\r\n\r\n**Ошибки:**\r\n- Нет специфических ошибок (если сервис недоступен - соединение не установится).\r\n\r\n---\r\n\r\n#### Альтернативная API\r\n\r\n##### 2. GET/POST/PUT/PATCH/DELETE `/api/v2/[...slugs]` - прокси для Elysia API\r\n\r\n**Запрос:**\r\n- Любой HTTP метод (GET, POST, PUT, PATCH, DELETE)\r\n- Путь: `/api/v2/{любой_путь}`\r\n\r\n**Ответ:**\r\n- Зависит от обработчика Elysia API\r\n\r\n**Логика:**\r\n- Универсальный прокси для всех методов HTTP.\r\n- Передаёт запрос в приложение Elysia через `app.handle(request)`.\r\n- Используется для:\r\n  - Расширений функциональности\r\n  - Совместимости с внешними API\r\n  - Альтернативных эндпоинтов\r\n  - Интеграций с внешними сервисами\r\n\r\n**Примеры использования:**\r\n```jsonc\r\n// Возможные пути (зависят от конфигурации Elysia):\r\nGET /api/v2/models/info\r\nPOST /api/v2/webhooks/slack\r\nPUT /api/v2/integrations/notion\r\nPATCH /api/v2/settings/advanced\r\nDELETE /api/v2/cache/clear\r\n```\r\n\r\n**Ошибки:**\r\n- Зависят от конкретного обработчика Elysia.\r\n- Обычно возвращаются как есть от Elysia приложения.\r\n\r\n---\r\n\r\n#### Общие особенности\r\n\r\n**Архитектура:**\r\n- Два слоя API: основной SvelteKit (`/api/*`) и расширяемый Elysia (`/api/v2/*`).\r\n- Elysia используется для дополнительной функциональности без изменения основного кода.\r\n\r\n**Мониторинг:**\r\n- `/healthcheck` - простейшая проверка доступности.\r\n- Можно расширить для проверки БД, внешних сервисов, дискового пространства.\r\n\r\n**Расширяемость:**\r\n- `/api/v2/*` позволяет добавлять новые эндпоинты без модификации SvelteKit роутов.\r\n- Подходит для webhooks, интеграций, экспериментальных функций.\r\n\r\n**Безопасность:**\r\n- Elysia API может иметь собственную аутентификацию и авторизацию.\r\n- Рекомендуется ограничить доступ к `/api/v2/*` если не нужен публичный доступ.\r\n\r\n### Публичные страницы \r\n\r\n#### Главная и каталоги\r\n\r\n##### 1. GET `/` - главная страница\r\n\r\n**Запрос:**\r\n```jsonc\r\n{} // без тела\r\n```\r\n\r\n**Ответ:**\r\n- HTML страница (SvelteKit SSR)\r\n\r\n**Логика:**\r\n- Главная страница приложения.\r\n- Может содержать:\r\n  - Форму создания нового диалога\r\n  - Список последних диалогов пользователя\r\n  - Рекомендуемые модели/ассистенты\r\n  - Статистику использования\r\n\r\n**Ошибки:**\r\n- Стандартные HTTP ошибки (404, 500 и т.д.).\r\n\r\n---\r\n\r\n##### 2. GET `/assistants` - каталог ассистентов\r\n\r\n**Запрос:**\r\n- Query параметры (опционально):\r\n  - `q` - поисковый запрос\r\n  - `modelId` - фильтр по модели\r\n  - `p` - номер страницы\r\n  - `user` - фильтр по создателю\r\n  - `showUnfeatured` - показать немодерированные (админ)\r\n\r\n**Ответ:**\r\n- HTML страница с каталогом ассистентов\r\n\r\n**Логика:**\r\n- Отображает каталог ассистентов с пагинацией.\r\n- Поддерживает поиск и фильтрацию.\r\n- Показывает только APPROVED ассистенты (если не админ).\r\n- Включает карточки с аватарами, описаниями, счётчиками пользователей.\r\n\r\n**Ошибки:**\r\n- Стандартные HTTP ошибки.\r\n\r\n---\r\n\r\n##### 3. GET `/models` - каталог моделей\r\n\r\n**Запрос:**\r\n```jsonc\r\n{} // без тела\r\n```\r\n\r\n**Ответ:**\r\n- HTML страница с каталогом моделей\r\n\r\n**Логика:**\r\n- Отображает список доступных моделей.\r\n- Показывает описания, возможности (multimodal, tools), ссылки на документацию.\r\n- Исключает unlisted модели.\r\n\r\n**Ошибки:**\r\n- Стандартные HTTP ошибки.\r\n\r\n---\r\n\r\n##### 4. GET `/tools` - каталог инструментов\r\n\r\n**Запрос:**\r\n- Query параметры (опционально):\r\n  - `q` - поисковый запрос\r\n\r\n**Ответ:**\r\n- HTML страница с каталогом инструментов\r\n\r\n**Логика:**\r\n- Отображает каталог инструментов (конфиговые + community APPROVED).\r\n- Поддерживает поиск по названию/описанию.\r\n- Показывает иконки, описания, примеры использования.\r\n\r\n**Ошибки:**\r\n- Стандартные HTTP ошибки.\r\n\r\n---\r\n\r\n#### Детальные страницы\r\n\r\n##### 5. GET `/assistant/{id}` - страница ассистента\r\n\r\n**Параметры пути:**\r\n- `id` - ObjectId ассистента\r\n\r\n**Ответ:**\r\n- HTML страница с деталями ассистента\r\n\r\n**Логика:**\r\n- Отображает полную информацию об ассистенте:\r\n  - Название, описание, аватар\r\n  - Подключённую модель и инструменты\r\n  - Примеры запросов\r\n  - RAG-настройки\r\n  - Статистику использования\r\n  - Кнопки подписки/отписки\r\n- Проверяет доступность ассистента (не удалён, APPROVED или создан пользователем).\r\n\r\n**Ошибки:**\r\n- 404 - ассистент не найден или недоступен.\r\n\r\n---\r\n\r\n##### 6. GET `/models/{model}` - страница модели\r\n\r\n**Параметры пути:**\r\n- `model` - ID модели\r\n\r\n**Ответ:**\r\n- HTML страница с деталями модели\r\n\r\n**Логика:**\r\n- Отображает информацию о модели:\r\n  - Описание и возможности\r\n  - Параметры генерации\r\n  - Примеры промптов\r\n  - Связанные ассистенты\r\n  - Статистику использования\r\n- Проверяет что модель не unlisted.\r\n\r\n**Ошибки:**\r\n- 404 - модель не найдена или скрыта.\r\n\r\n---\r\n\r\n##### 7. GET `/tools/{id}` - страница инструмента\r\n\r\n**Параметры пути:**\r\n- `id` - ID инструмента\r\n\r\n**Ответ:**\r\n- HTML страница с деталями инструмента\r\n\r\n**Логика:**\r\n- Отображает информацию об инструменте:\r\n  - Название, описание, иконка\r\n  - Параметры и примеры\r\n  - Схему входных/выходных данных\r\n  - Статистику использования\r\n  - Связанные ассистенты\r\n- Проверяет доступность (конфиговый или community APPROVED).\r\n\r\n**Ошибки:**\r\n- 404 - инструмент не найден или недоступен.\r\n\r\n---\r\n\r\n#### Настройки и политики\r\n\r\n##### 8. GET `/settings` - настройки пользователя\r\n\r\n**Запрос:**\r\n```jsonc\r\n{} // без тела\r\n```\r\n\r\n**Ответ:**\r\n- HTML страница с настройками\r\n\r\n**Логика:**\r\n- Отображает форму настроек пользователя:\r\n  - Активная модель\r\n  - Подключённые инструменты\r\n  - Настройки приватности (shareConversationsWithModelAuthors)\r\n  - UI настройки (hideEmojiOnSidebar, disableStream, directPaste)\r\n  - Кастомные промпты\r\n- Требует авторизации.\r\n\r\n**Ошибки:**\r\n- 401 - пользователь не авторизован.\r\n\r\n---\r\n\r\n##### 9. GET `/privacy` - политика конфиденциальности\r\n\r\n**Запрос:**\r\n```jsonc\r\n{} // без тела\r\n```\r\n\r\n**Ответ:**\r\n- HTML страница с политикой конфиденциальности\r\n\r\n**Логика:**\r\n- Статическая страница с информацией о:\r\n  - Сборе и использовании данных\r\n  - Хранении диалогов\r\n  - Передаче данных провайдерам моделей\r\n  - Правах пользователей\r\n\r\n**Ошибки:**\r\n- Стандартные HTTP ошибки.\r\n\r\n---\r\n\r\n#### Публичный контент\r\n\r\n##### 10. GET `/r/{id}` - публичный просмотр расшаренного диалога\r\n\r\n**Параметры пути:**\r\n- `id` - 7-символьный shareId\r\n\r\n**Ответ:**\r\n- HTML страница с диалогом\r\n\r\n**Логика:**\r\n- Отображает публичный слепок диалога:\r\n  - Заголовок и сообщения\r\n  - Информацию о модели/ассистенте\r\n  - Возможность создать копию диалога\r\n  - Кнопку \"Начать новый чат с этой моделью\"\r\n- Не требует авторизации.\r\n- Читает данные из коллекции `sharedConversations`.\r\n\r\n**Ошибки:**\r\n- 404 - расшаренный диалог не найден.\r\n\r\n---\r\n\r\n#### Общие особенности\r\n\r\n**Рендеринг:**\r\n- Все страницы используют SvelteKit SSR.\r\n- Данные загружаются на сервере и передаются в компоненты.\r\n\r\n**Авторизация:**\r\n- Большинство страниц доступны без авторизации.\r\n- `/settings` требует авторизации.\r\n- Публичные страницы (`/r/{id}`) доступны всем.\r\n\r\n**SEO и мета-теги:**\r\n- Каждая страница может иметь уникальные мета-теги.\r\n- Публичные страницы оптимизированы для социальных сетей.\r\n\r\n**Навигация:**\r\n- Единая навигация через layout компоненты.\r\n- Breadcrumbs для каталогов и детальных страниц.\r\n\r\n### Файлы и медиа\r\n\r\n#### Аватары и превью\r\n\r\n##### 1. GET `/assistant/{id}/avatar.jpg` - аватар ассистента\r\n\r\n**Параметры пути:**\r\n- `id` - ObjectId ассистента\r\n\r\n**Ответ:**\r\n- Бинарный поток изображения\r\n- Заголовки:\r\n```http\r\nContent-Type: image/jpeg\r\nContent-Disposition: inline; filename=\"avatar.jpg\"\r\nCache-Control: public, max-age=31536000\r\n```\r\n\r\n**Логика:**\r\n- Проверяет существование ассистента.\r\n- Ищет файл в GridFS bucket по ключу `{assistantId}`.\r\n- Возвращает JPEG изображение (512x512, качество 80%).\r\n- Если аватара нет - возвращает дефолтное изображение или 404.\r\n\r\n**Ошибки:**\r\n- 404 - ассистент не найден или аватар отсутствует.\r\n\r\n---\r\n\r\n##### 2. GET `/assistant/{id}/thumbnail.png` - превью ассистента\r\n\r\n**Параметры пути:**\r\n- `id` - ObjectId ассистента\r\n\r\n**Ответ:**\r\n- Бинарный поток изображения\r\n- Заголовки:\r\n```http\r\nContent-Type: image/png\r\nContent-Disposition: inline; filename=\"thumbnail.png\"\r\nCache-Control: public, max-age=31536000\r\n```\r\n\r\n**Логика:**\r\n- Генерирует превью на основе данных ассистента:\r\n  - Использует аватар если есть\r\n  - Или создаёт превью с названием/иконкой ассистента\r\n  - Размер обычно 256x256 или меньше\r\n- Возвращает PNG изображение.\r\n\r\n**Ошибки:**\r\n- 404 - ассистент не найден.\r\n\r\n---\r\n\r\n##### 3. GET `/models/{model}/thumbnail.png` - превью модели\r\n\r\n**Параметры пути:**\r\n- `model` - ID модели\r\n\r\n**Ответ:**\r\n- Бинарный поток изображения\r\n- Заголовки:\r\n```http\r\nContent-Type: image/png\r\nContent-Disposition: inline; filename=\"thumbnail.png\"\r\nCache-Control: public, max-age=31536000\r\n```\r\n\r\n**Логика:**\r\n- Генерирует превью модели:\r\n  - Использует `logoUrl` из конфигурации модели если есть\r\n  - Или создаёт превью с названием модели и логотипом провайдера\r\n  - Размер обычно 256x256 или меньше\r\n- Возвращает PNG изображение.\r\n\r\n**Ошибки:**\r\n- 404 - модель не найдена или скрыта (unlisted).\r\n\r\n---\r\n\r\n#### Общие особенности\r\n\r\n**Хранение файлов:**\r\n- Используется MongoDB GridFS для хранения бинарных данных.\r\n- Файлы именуются по ID сущности (ассистента/модели).\r\n- Поддерживается версионирование (новые файлы заменяют старые).\r\n\r\n**Обработка изображений:**\r\n- Аватары обрабатываются через Sharp:\r\n  - Ресайз до 512x512 с сохранением пропорций\r\n  - Конвертация в JPEG с качеством 80%\r\n  - Оптимизация размера файла\r\n\r\n**Кэширование:**\r\n- Все медиа-файлы имеют долгосрочное кэширование (1 год).\r\n- Браузеры и CDN могут кэшировать изображения.\r\n- При обновлении файла меняется его содержимое.\r\n\r\n**Безопасность:**\r\n- Проверка существования сущности перед отдачей файла.\r\n- Нет прямого доступа к файловой системе.\r\n- Все файлы проходят через GridFS с контролем доступа.\r\n\r\n**Формат файлов:**\r\n- Аватары: JPEG (лучше для фотографий).\r\n- Превью: PNG (лучше для логотипов и графики).\r\n- Поддержка прозрачности в PNG превью.\r\n\r\n**Fallback:**\r\n- Если файл отсутствует - возвращается дефолтное изображение.\r\n- Дефолтные изображения хранятся в `static/` папке.\r\n- Graceful degradation для отсутствующих медиа.\r\n\r\n### Конфигурация\r\n\r\n#### Пользовательские настройки\r\n\r\n##### 1. POST `/settings/(nav)/+server.ts` - обновление настроек пользователя\r\n\r\n**Запрос (JSON):**\r\n```jsonc\r\n{\r\n  \"shareConversationsWithModelAuthors\": true,  // опционально: делиться диалогами с авторами моделей\r\n  \"hideEmojiOnSidebar\": false,                // опционально: скрыть эмодзи в боковой панели\r\n  \"activeModel\": \"string\",                    // опционально: ID активной модели\r\n  \"customPrompts\": {                          // опционально: кастомные промпты\r\n    \"modelId1\": \"string\",                    // промпт для конкретной модели\r\n    \"modelId2\": \"string\"\r\n  },\r\n  \"tools\": [\"string\"],                        // опционально: список ID подключённых инструментов\r\n  \"disableStream\": false,                     // опционально: отключить стриминг ответов\r\n  \"directPaste\": false                        // опционально: прямой вставка без форматирования\r\n}\r\n```\r\n\r\n**Ответ:**\r\n```jsonc\r\n{} // 200 OK, пустое тело\r\n```\r\n\r\n**Логика:**\r\n- Валидирует входные данные через Zod схему.\r\n- Проверяет существование всех указанных инструментов:\r\n  - Ищет в коллекции `tools` (community tools)\r\n  - Ищет в `toolFromConfigs` (конфиговые инструменты)\r\n  - Фильтрует только существующие инструменты\r\n- Обновляет настройки пользователя в коллекции `settings`:\r\n  - `$set` - обновляет переданные поля\r\n  - `$setOnInsert` - устанавливает `createdAt` при создании\r\n  - `upsert: true` - создаёт настройки если их нет\r\n- Если передан `ethicsModalAccepted: true` - устанавливает `ethicsModalAcceptedAt: new Date()`.\r\n\r\n**Валидация полей:**\r\n```jsonc\r\n{\r\n  \"shareConversationsWithModelAuthors\": \"boolean (default: false)\",\r\n  \"hideEmojiOnSidebar\": \"boolean (default: false)\", \r\n  \"activeModel\": \"string (default: defaultModel.id)\",\r\n  \"customPrompts\": \"record<string, string> (default: {})\",\r\n  \"tools\": \"string[] (default: undefined)\",\r\n  \"disableStream\": \"boolean (default: false)\",\r\n  \"directPaste\": \"boolean (default: false)\"\r\n}\r\n```\r\n\r\n**Ошибки:**\r\n- 400 - невалидные данные (несоответствие схеме Zod).\r\n- 401 - пользователь не авторизован.\r\n\r\n---\r\n\r\n#### Общие особенности\r\n\r\n**Структура настроек:**\r\n- Хранятся в коллекции `settings` с полями:\r\n  - `userId` или `sessionId` (для гостей)\r\n  - `assistants` - массив подписанных ассистентов\r\n  - `activeModel` - текущая активная модель\r\n  - `customPrompts` - промпты для конкретных моделей\r\n  - `tools` - подключённые инструменты\r\n  - `shareConversationsWithModelAuthors` - согласие на передачу данных\r\n  - `hideEmojiOnSidebar` - UI настройки\r\n  - `disableStream` - настройки генерации\r\n  - `directPaste` - настройки ввода\r\n  - `ethicsModalAcceptedAt` - время принятия этических правил\r\n\r\n**Безопасность:**\r\n- Все изменения привязаны к текущему пользователю/сессии.\r\n- Невозможно изменить настройки другого пользователя.\r\n- Валидация всех входных данных.\r\n\r\n**Совместимость:**\r\n- Поддержка как авторизованных пользователей, так и гостевых сессий.\r\n- Настройки сохраняются отдельно для каждого пользователя/сессии.\r\n\r\n**Инструменты:**\r\n- Автоматическая фильтрация несуществующих инструментов.\r\n- Поддержка как community tools, так и конфиговых инструментов.\r\n- При удалении инструмента он автоматически убирается из всех настроек.\r\n",
      "filename" : "api.md",
      "format" : "Markdown",
      "order" : 1,
      "title" : ""
    }, {
      "content" : "## Стек технологий\r\n\r\n###  Frontend \r\n\r\n#### Основной фреймворк\r\n- **SvelteKit 2.21.1** - современный фреймворк для веб-приложений с серверным рендерингом\r\n- **Svelte 5.33.3** - реактивный фреймворк с компиляцией во время сборки\r\n\r\n#### Стилизация\r\n- **Tailwind CSS 3.4.0** - utility-first CSS фреймворк\r\n- **@tailwindcss/typography** - плагин для типографики\r\n- **tailwind-scrollbar** - кастомные скроллбары\r\n- **PostCSS 8.4.31** - инструмент для обработки CSS\r\n\r\n#### Иконки и UI компоненты\r\n- **unplugin-icons** - система иконок\r\n- **@iconify-json** - коллекции иконок (Carbon, EOS, Bootstrap Icons)\r\n- **svelte-gestures** - поддержка жестов\r\n\r\n###  Backend (Серверная часть)\r\n\r\n#### Основной фреймворк\r\n- **Elysia 1.3.2** - быстрый веб-фреймворк для Bun/Node.js\r\n- **@sveltejs/adapter-node** - адаптер для развертывания на Node.js\r\n\r\n#### API и маршрутизация\r\n- **SvelteKit API routes** - встроенная система API маршрутов\r\n- **@elysiajs/swagger** - автоматическая генерация Swagger документации+\r\n- **@elysiajs/cors** - поддержка CORS\r\n\r\n#### Аутентификация\r\n- **OpenID Connect** - стандарт аутентификации\r\n- **openid-client** - клиент для OpenID Connect\r\n- **JWT (jose)** - работа с JSON Web Tokens\r\n\r\n###  База данных\r\n\r\n#### Основная БД\r\n- **MongoDB 5.8.0** - NoSQL документная база данных\r\n- **bson-objectid** - работа с ObjectId MongoDB\r\n\r\n#### Миграции\r\n- **Кастомная система миграций** - в `src/lib/migrations/`\r\n\r\n###  ИИ и машинное обучение\r\n\r\n#### Поддержка различных провайдеров\r\n- **Hugging Face Hub** - интеграция с моделями HF\r\n- **OpenAI API** - поддержка GPT моделей\r\n- **Anthropic Claude** - интеграция с Claude\r\n- **Google Vertex AI** - поддержка Gemini\r\n- **AWS Bedrock** - Amazon AI сервисы\r\n- **Cohere** - альтернативный провайдер ИИ\r\n\r\n#### Локальные модели\r\n- **llama.cpp** - локальный запуск LLM моделей\r\n- **Ollama** - система управления локальными моделями\r\n- **Text Generation Inference (TGI)** - сервер для запуска моделей\r\n\r\n#### Эмбеддинги\r\n- **@huggingface/transformers** - трансформеры для эмбеддингов\r\n- **Transformers.js** - браузерные трансформеры\r\n\r\n###  Веб-поиск и RAG\r\n\r\n#### Поисковые API\r\n- **Serper API** - поиск через Google\r\n- **SerpAPI** - альтернативный поисковый API\r\n- **You.com API** - поиск через You.com\r\n- **SearXNG** - метапоисковая система\r\n\r\n#### Парсинг веб-страниц\r\n- **Playwright** - автоматизация браузера для скрапинга\r\n- **jsdom** - парсинг HTML в Node.js\r\n- **@cliqz/adblocker-playwright** - блокировка рекламы\r\n\r\n#### RAG (Retrieval-Augmented Generation)\r\n- **Векторный поиск** - поиск по сходству эмбеддингов\r\n- **Chunking** - разбиение текста на фрагменты\r\n- **Markdown парсинг** - обработка контента\r\n\r\n###  Инструменты и утилиты\r\n\r\n#### Обработка файлов\r\n- **Sharp** - обработка изображений\r\n- **file-type** - определение типов файлов\r\n- **image-size** - получение размеров изображений\r\n- **yazl** - создание ZIP архивов\r\n\r\n#### Текст и разметка\r\n- **marked** - парсер Markdown\r\n- **highlight.js** - подсветка синтаксиса кода\r\n- **katex** - рендеринг математических формул\r\n- **dompurify** - санитизация HTML\r\n\r\n#### Утилиты\r\n- **date-fns** - работа с датами\r\n- **uuid** - генерация уникальных идентификаторов\r\n- **nanoid** - компактные уникальные ID\r\n- **natural** - обработка естественного языка\r\n\r\n###  Контейнеризация и развертывание\r\n\r\n#### Docker\r\n- **Multi-stage builds** - многоэтапная сборка\r\n- **Node.js 20** - базовый образ\r\n- **MongoDB** - встроенная БД (опционально)\r\n- **Playwright** - для веб-скрапинга\r\n\r\n#### Kubernetes\r\n- **Helm Charts** - система управления пакетами K8s\r\n- **Deployment** - развертывание приложения\r\n- **Service** - сетевое взаимодействие\r\n- **Ingress** - маршрутизация трафика\r\n- **ConfigMap** - конфигурация\r\n- **HPA** - автоматическое масштабирование\r\n\r\n###  Тестирование\r\n\r\n#### Тестовые фреймворки\r\n- **Vitest** - быстрый тестовый раннер\r\n- **Playwright** - E2E тестирование в браузере\r\n- **vitest-browser-svelte** - тестирование Svelte компонентов\r\n\r\n#### Типы тестов\r\n- **Unit тесты** - тестирование отдельных функций\r\n- **Component тесты** - тестирование Svelte компонентов\r\n- **E2E тесты** - тестирование полного пользовательского пути\r\n\r\n###  Мониторинг и логирование\r\n\r\n#### Логирование\r\n- **Pino** - быстрый JSON логгер\r\n- **pino-pretty** - форматирование логов\r\n\r\n#### Метрики\r\n- **prom-client** - метрики Prometheus\r\n- **Service Monitor** - мониторинг в Kubernetes\r\n\r\n###  Инструменты разработки\r\n\r\n#### Сборка\r\n- **Vite 6.3.5** - быстрый сборщик\r\n- **TypeScript 5.5.0** - типизация\r\n- **ts-node** - выполнение TypeScript\r\n\r\n#### Качество кода\r\n- **ESLint** - линтер JavaScript/TypeScript\r\n- **Prettier** - форматирование кода\r\n- **Husky** - Git hooks\r\n- **lint-staged** - проверка staged файлов\r\n\r\n#### Управление зависимостями\r\n- **npm** - пакетный менеджер\r\n- **package-lock.json** - фиксация версий\r\n\r\n###  Инфраструктура\r\n\r\n#### CDN и статика\r\n- **SvelteKit static assets** - встроенная система статических файлов\r\n- **Manifest.json** - PWA манифест\r\n\r\n#### Безопасность\r\n- **CSP (Content Security Policy)** - защита от XSS\r\n- **CSRF защита** - защита от CSRF атак\r\n- **CORS** - управление cross-origin запросами\r\n\r\n###  PWA и мобильность\r\n\r\n#### Progressive Web App\r\n- **Manifest.json** - конфигурация PWA\r\n- **Service Worker** - кэширование и офлайн работа\r\n- **Responsive design** - адаптивный дизайн\r\n",
      "filename" : "technologys.md",
      "format" : "Markdown",
      "order" : 2,
      "title" : ""
    } ]
  },
  "id" : 1,
  "lastModifiedDate" : "2025-09-05T16:49:28Z",
  "model" : { },
  "name" : "Name",
  "properties" : {
    "structurizr.dsl" : "d29ya3NwYWNlIHsKICAhZG9jcyBkb2NzCiAgbW9kZWwgewoKICB9CgogIHZpZXdzIHsKICAgIHN0eWxlcyB7CiAgICAgIGVsZW1lbnQgImRhdGFiYXNlIiB7CiAgICAgICAgc2hhcGUgY3lsaW5kZXIKICAgICAgICBiYWNrZ3JvdW5kICMzMzY2Y2MKICAgICAgICBjb2xvciAjZmZmZmZmCiAgICAgIH0KCiAgICAgIGVsZW1lbnQgImNhY2hlIiB7CiAgICAgICAgc2hhcGUgcGlwZQogICAgICAgIGJhY2tncm91bmQgI2NjMDAwMAogICAgICAgIGNvbG9yICNmZmZmZmYKICAgICAgfQoKICAgICAgZWxlbWVudCAidGhpcmRwYXJ0eSIgewogICAgICAgIGJhY2tncm91bmQgI2VlZWVlZQogICAgICAgIGNvbG9yICMwMDAwMDAKICAgICAgICBzaGFwZSBmb2xkZXIKICAgICAgfQoKICAgICAgZWxlbWVudCAid2ViIiB7CiAgICAgICAgc2hhcGUgd2ViYnJvd3NlcgogICAgICAgIGJhY2tncm91bmQgIzFlOTBmZgogICAgICAgIGNvbG9yICNmZmZmZmYKICAgICAgfQoKICAgICAgZWxlbWVudCAiYmFja2VuZCIgewogICAgICAgIHNoYXBlIHJvdW5kZWRib3gKICAgICAgICBiYWNrZ3JvdW5kICM0Y2FmNTAKICAgICAgICBjb2xvciAjZmZmZmZmCiAgICAgIH0KCiAgICAgIGVsZW1lbnQgImJyb2tlciIgewogICAgICAgIHNoYXBlIHBpcGUKICAgICAgICBiYWNrZ3JvdW5kICNmZjk5MDAKICAgICAgICBjb2xvciAjMDAwMDAwCiAgICAgIH0KICAgIH0KCiAgICB0aGVtZSBkZWZhdWx0CiAgfQp9"
  },
  "views" : {
    "configuration" : {
      "branding" : { },
      "styles" : {
        "elements" : [ {
          "background" : "#3366cc",
          "color" : "#ffffff",
          "shape" : "Cylinder",
          "tag" : "database"
        }, {
          "background" : "#cc0000",
          "color" : "#ffffff",
          "shape" : "Pipe",
          "tag" : "cache"
        }, {
          "background" : "#eeeeee",
          "color" : "#000000",
          "shape" : "Folder",
          "tag" : "thirdparty"
        }, {
          "background" : "#1e90ff",
          "color" : "#ffffff",
          "shape" : "WebBrowser",
          "tag" : "web"
        }, {
          "background" : "#4caf50",
          "color" : "#ffffff",
          "shape" : "RoundedBox",
          "tag" : "backend"
        }, {
          "background" : "#ff9900",
          "color" : "#000000",
          "shape" : "Pipe",
          "tag" : "broker"
        } ]
      },
      "terminology" : { },
      "themes" : [ "https://static.structurizr.com/themes/default/theme.json" ]
    }
  }
}